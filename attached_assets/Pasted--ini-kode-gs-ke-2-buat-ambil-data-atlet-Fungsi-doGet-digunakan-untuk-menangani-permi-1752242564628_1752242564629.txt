/**
 * 
 * ini kode.gs ke 2 buat ambil data atlet
 * Fungsi doGet digunakan untuk menangani permintaan GET dari API.
 * Fungsi ini akan mengambil data dari sheet "Ingfo" dan mengembalikannya sebagai JSON.
 */
function doGet(e) {
  try {
    console.log("=== doGet START ===");
    console.log("Parameters received:", e.parameter);
    
    // Check if specific action is requested
    if (e && e.parameter && e.parameter.action) {
      console.log("Action requested:", e.parameter.action);
      
      if (e.parameter.action === "getAthletes") {
        return getAthletes(e.parameter.competitionId);
      } else if (e.parameter.action === "getStats") {
        return getStats();
      }
    }
    
    // Default: return competitions list
    console.log("Getting competitions list...");
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Ingfo');
    if (!sheet) {
      throw new Error("Sheet 'Ingfo' tidak ditemukan");
    }
    
    var data = sheet.getDataRange().getValues();
    console.log("Raw competition data:", data);
    
    if (data.length <= 1) {
      console.log("No competition data found");
      return ContentService
        .createTextOutput(JSON.stringify([]))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    var result = data.slice(1).map(function(row, index) {
      return {
        id: String(row[0] || ""),
        nama: String(row[1] || ""),
        deskripsi: String(row[2] || ""),
        poster: String(row[3] || ""),
        status: parseInt(row[4]) || 0
      };
    });
    
    console.log("Processed competitions:", result);
    console.log("=== doGet END ===");
    
    return ContentService
      .createTextOutput(JSON.stringify(result))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (e) {
    console.error("Error in doGet:", e.toString());
    return ContentService
      .createTextOutput(JSON.stringify({ error: e.toString() }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * Fungsi getAthletes untuk mengambil data atlet berdasarkan ID kejuaraan
 */
function getAthletes(competitionId) {
  try {
    console.log("=== getAthletes START ===");
    console.log("Competition ID:", competitionId);
    
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Daftar');
    if (!sheet) {
      throw new Error("Sheet 'Daftar' tidak ditemukan");
    }
    
    var data = sheet.getDataRange().getValues();
    console.log("Total rows in Daftar sheet:", data.length);
    
    if (data.length <= 1) {
      console.log("No athlete data found");
      return ContentService
        .createTextOutput(JSON.stringify([]))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    // Filter by competition ID
    var result = [];
    for (var i = 1; i < data.length; i++) {
      var row = data[i];
      if (String(row[2]) === String(competitionId)) {
        result.push({
          rowIndex: i + 1, // 1-based index for sheet operations
          timestamp: String(row[0] || ""),
          registrationId: String(row[1] || ""),
          idKejuaraan: String(row[2] || ""),
          nama: String(row[3] || ""),
          gender: String(row[4] || ""),
          sabuk: String(row[5] || ""),
          tempatTanggalLahir: String(row[6] || ""),
          dojang: String(row[7] || ""),
          berat: String(row[8] || ""),
          tinggi: String(row[9] || ""),
          kategori: String(row[10] || ""),
          kelas: String(row[11] || ""),
          orderJersey: String(row[12] || ""),
          jerseySize: String(row[13] || "")
        });
      }
    }
    
    console.log("Athletes found:", result.length);
    console.log("=== getAthletes END ===");
    
    return ContentService
      .createTextOutput(JSON.stringify(result))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (e) {
    console.error("Error in getAthletes:", e.toString());
    return ContentService
      .createTextOutput(JSON.stringify({ error: e.toString() }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * Fungsi getStats untuk mengambil statistik kompetisi dan atlet
 * FIXED: Properly handle multiple categories separated by commas
 */
function getStats() {
  try {
    console.log("=== getStats START ===");
    
    var competitionSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Ingfo');
    var athleteSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Daftar');
    
    if (!competitionSheet || !athleteSheet) {
      throw new Error("Required sheets not found");
    }
    
    var competitionData = competitionSheet.getDataRange().getValues().slice(1);
    var athleteData = athleteSheet.getDataRange().getValues().slice(1);
    
    var totalCompetitions = competitionData.length;
    var activeCompetitions = 0;
    var closedCompetitions = 0;
    
    for (var i = 0; i < competitionData.length; i++) {
      if (parseInt(competitionData[i][4]) === 1) {
        activeCompetitions++;
      } else {
        closedCompetitions++;
      }
    }
    
    var totalAthletes = athleteData.length;
    var maleCount = 0;
    var femaleCount = 0;
    var kyorugiCount = 0;
    var poomsaeCount = 0;
    var jerseyOrderCount = 0;
    var athletesByCompetition = {};
    
    for (var i = 0; i < athleteData.length; i++) {
      var row = athleteData[i];
      
      // Gender stats
      if (String(row[4]) === "Laki-laki") maleCount++;
      if (String(row[4]) === "Perempuan") femaleCount++;
      
      // Category stats - FIXED: Handle multiple categories properly
      var categories = String(row[10] || "").toLowerCase().trim();
      console.log("Processing categories for athlete " + (i+1) + ":", categories);
      
      // Check if categories contain kyorugi or poomsae (case insensitive)
      if (categories.indexOf("kyorugi") !== -1) {
        kyorugiCount++;
        console.log("Found Kyorugi, count now:", kyorugiCount);
      }
      if (categories.indexOf("poomsae") !== -1) {
        poomsaeCount++;
        console.log("Found Poomsae, count now:", poomsaeCount);
      }
      
      // Jersey order stats
      if (String(row[12]) === "Ya") jerseyOrderCount++;
      
      // Athletes by competition
      var compId = String(row[2]);
      if (!athletesByCompetition[compId]) {
        athletesByCompetition[compId] = 0;
      }
      athletesByCompetition[compId]++;
    }
    
    var result = {
      totalCompetitions: totalCompetitions,
      activeCompetitions: activeCompetitions,
      closedCompetitions: closedCompetitions,
      totalAthletes: totalAthletes,
      athletesByCompetition: athletesByCompetition,
      categoryStats: {
        kyorugi: kyorugiCount,
        poomsae: poomsaeCount
      },
      genderStats: {
        male: maleCount,
        female: femaleCount
      },
      jerseyOrderCount: jerseyOrderCount
    };
    
    console.log("Stats result:", result);
    console.log("=== getStats END ===");
    
    return ContentService
      .createTextOutput(JSON.stringify(result))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (e) {
    console.error("Error in getStats:", e.toString());
    return ContentService
      .createTextOutput(JSON.stringify({ error: e.toString() }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * Fungsi doPost digunakan untuk menangani permintaan POST dari API.
 */
function doPost(e) {
  try {
    console.log("=== doPost START ===");
    console.log("Raw postData:", e.postData);
    
    var params;
    
    // Parse request data - improved to handle URL encoding properly
    if (e.postData && e.postData.contents) {
      try {
        // Try JSON first
        params = JSON.parse(e.postData.contents);
        console.log("Parsed as JSON:", params);
      } catch (jsonError) {
        console.log("JSON parse failed, trying URL encoded");
        
        // Try URL encoded with proper decoding
        try {
          var content = e.postData.contents;
          params = {};
          
          if (content.includes('=')) {
            var pairs = content.split('&');
            for (var i = 0; i < pairs.length; i++) {
              var pair = pairs[i].split('=');
              if (pair.length === 2) {
                var key = decodeURIComponent(pair[0]);
                var value = decodeURIComponent(pair[1].replace(/\+/g, ' ')); // Fix: Replace + with spaces
                params[key] = value;
              }
            }
          }
          console.log("Parsed as URL encoded:", params);
        } catch (urlError) {
          console.error("Both parsing methods failed");
          throw new Error("Invalid request format");
        }
      }
    } else if (e.parameter) {
      // Handle GET parameters
      params = e.parameter;
      console.log("Using GET parameters:", params);
    } else {
      throw new Error("No post data received");
    }
    
    var action = params.action;
    console.log("Action to perform:", action);
    
    if (!action) {
      throw new Error("No action specified");
    }
    
    var result;
    
    // Route to appropriate function
    switch (action) {
      case "createCompetition":
        result = createCompetition(params);
        break;
      case "updateCompetition":
        result = updateCompetition(params);
        break;
      case "deleteCompetition":
        result = deleteCompetition(params);
        break;
      case "create":
        result = createAthlete(params);
        break;
      case "update":
        result = updateAthlete(params);
        break;
      case "delete":
        result = deleteAthlete(params);
        break;
      default:
        throw new Error("Unknown action: " + action);
    }
    
    console.log("=== doPost END ===");
    return result;
    
  } catch (e) {
    console.error("Error in doPost:", e.toString());
    return ContentService
      .createTextOutput(JSON.stringify({ error: e.toString() }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * Fungsi createCompetition untuk menambahkan kompetisi baru
 */
function createCompetition(params) {
  try {
    console.log("=== createCompetition START ===");
    console.log("Params:", params);
    
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Ingfo');
    if (!sheet) {
      throw new Error("Sheet 'Ingfo' tidak ditemukan");
    }
    
    // Validate required fields
    if (!params.id || !params.nama || !params.deskripsi) {
      throw new Error("ID, nama, dan deskripsi wajib diisi");
    }
    
    // Check if ID already exists
    var data = sheet.getDataRange().getValues();
    for (var i = 1; i < data.length; i++) {
      if (String(data[i][0]) === String(params.id)) {
        throw new Error("ID Kejuaraan '" + params.id + "' sudah ada");
      }
    }
    
    // Add new row
    var newRow = [
      String(params.id),
      String(params.nama),
      String(params.deskripsi),
      String(params.poster || ""),
      parseInt(params.status) || 0
    ];
    
    sheet.appendRow(newRow);
    SpreadsheetApp.flush();
    
    console.log("Competition created:", newRow);
    console.log("=== createCompetition END ===");
    
    return ContentService
      .createTextOutput(JSON.stringify({
        success: true,
        message: "Kompetisi berhasil ditambahkan",
        id: params.id
      }))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (e) {
    console.error("Error in createCompetition:", e.toString());
    return ContentService
      .createTextOutput(JSON.stringify({ error: e.toString() }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * Fungsi updateCompetition untuk mengupdate data kompetisi
 */
function updateCompetition(params) {
  try {
    console.log("=== updateCompetition START ===");
    console.log("Params:", params);
    
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Ingfo');
    if (!sheet) {
      throw new Error("Sheet 'Ingfo' tidak ditemukan");
    }
    
    // Validate required fields
    if (!params.id || !params.nama || !params.deskripsi) {
      throw new Error("ID, nama, dan deskripsi wajib diisi");
    }
    
    var data = sheet.getDataRange().getValues();
    var rowIndex = -1;
    
    // Find the row to update
    for (var i = 1; i < data.length; i++) {
      if (String(data[i][0]) === String(params.id)) {
        rowIndex = i + 1; // Sheet uses 1-based indexing
        break;
      }
    }
    
    if (rowIndex === -1) {
      throw new Error("Kompetisi dengan ID '" + params.id + "' tidak ditemukan");
    }
    
    console.log("Updating row:", rowIndex);
    
    // Update the row with proper string handling
    sheet.getRange(rowIndex, 2).setValue(String(params.nama));
    sheet.getRange(rowIndex, 3).setValue(String(params.deskripsi));
    sheet.getRange(rowIndex, 4).setValue(String(params.poster || ""));
    sheet.getRange(rowIndex, 5).setValue(parseInt(params.status) || 0);
    
    SpreadsheetApp.flush();
    
    console.log("Competition updated successfully");
    console.log("=== updateCompetition END ===");
    
    return ContentService
      .createTextOutput(JSON.stringify({
        success: true,
        message: "Kompetisi berhasil diupdate",
        id: params.id
      }))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (e) {
    console.error("Error in updateCompetition:", e.toString());
    return ContentService
      .createTextOutput(JSON.stringify({ error: e.toString() }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * Fungsi deleteCompetition untuk menghapus kompetisi
 */
function deleteCompetition(params) {
  try {
    console.log("=== deleteCompetition START ===");
    console.log("Params:", params);
    
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Ingfo');
    if (!sheet) {
      throw new Error("Sheet 'Ingfo' tidak ditemukan");
    }
    
    if (!params.id) {
      throw new Error("ID kompetisi tidak valid");
    }
    
    var data = sheet.getDataRange().getValues();
    var rowIndex = -1;
    
    // Find the row to delete
    for (var i = 1; i < data.length; i++) {
      if (String(data[i][0]) === String(params.id)) {
        rowIndex = i + 1; // Sheet uses 1-based indexing
        break;
      }
    }
    
    if (rowIndex === -1) {
      throw new Error("Kompetisi tidak ditemukan");
    }
    
    console.log("Deleting row:", rowIndex);
    
    // Delete the row
    sheet.deleteRow(rowIndex);
    SpreadsheetApp.flush();
    
    console.log("Competition deleted successfully");
    console.log("=== deleteCompetition END ===");
    
    return ContentService
      .createTextOutput(JSON.stringify({
        success: true,
        message: "Kompetisi berhasil dihapus",
        id: params.id
      }))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (e) {
    console.error("Error in deleteCompetition:", e.toString());
    return ContentService
      .createTextOutput(JSON.stringify({ error: e.toString() }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * Fungsi createAthlete untuk menambahkan atlet baru
 */
function createAthlete(params) {
  try {
    console.log("=== createAthlete START ===");
    console.log("Params:", params);
    
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Daftar');
    if (!sheet) {
      throw new Error("Sheet 'Daftar' tidak ditemukan");
    }
    
    // Validate required fields
    var required = ['idKejuaraan', 'nama', 'gender', 'sabuk', 'tempatTanggalLahir', 'dojang', 'berat', 'tinggi', 'kategori', 'kelas'];
    for (var i = 0; i < required.length; i++) {
      if (!params[required[i]]) {
        throw new Error("Field '" + required[i] + "' wajib diisi");
      }
    }
    
    // Generate registration ID
    var timestamp = new Date().toISOString();
    var registrationId = "REG" + Date.now();
    
    var newRow = [
      timestamp,
      registrationId,
      String(params.idKejuaraan),
      String(params.nama),
      String(params.gender),
      String(params.sabuk),
      String(params.tempatTanggalLahir),
      String(params.dojang),
      String(params.berat),
      String(params.tinggi),
      String(params.kategori), // This now contains comma-separated categories
      String(params.kelas),
      String(params.orderJersey || "Tidak"), // Jersey order status
      String(params.jerseySize || "-") // Jersey size
    ];
    
    sheet.appendRow(newRow);
    SpreadsheetApp.flush();
    
    console.log("Athlete created:", newRow);
    console.log("=== createAthlete END ===");
    
    return ContentService
      .createTextOutput(JSON.stringify({
        success: true,
        message: "Atlet berhasil ditambahkan",
        registrationId: registrationId
      }))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (e) {
    console.error("Error in createAthlete:", e.toString());
    return ContentService
      .createTextOutput(JSON.stringify({ error: e.toString() }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * Fungsi updateAthlete untuk mengupdate data atlet
 */
function updateAthlete(params) {
  try {
    console.log("=== updateAthlete START ===");
    console.log("Params:", params);
    
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Daftar');
    if (!sheet) {
      throw new Error("Sheet 'Daftar' tidak ditemukan");
    }
    
    if (!params.rowIndex) {
      throw new Error("Row index tidak valid");
    }
    
    var rowIndex = parseInt(params.rowIndex);
    console.log("Updating row:", rowIndex);
    
    // Validate required fields
    var required = ['nama', 'gender', 'sabuk', 'tempatTanggalLahir', 'dojang', 'berat', 'tinggi', 'kategori', 'kelas'];
    for (var i = 0; i < required.length; i++) {
      if (!params[required[i]]) {
        throw new Error("Field '" + required[i] + "' wajib diisi");
      }
    }
    
    // Update the row with proper string handling (skip timestamp and registration ID)
    sheet.getRange(rowIndex, 4).setValue(String(params.nama));
    sheet.getRange(rowIndex, 5).setValue(String(params.gender));
    sheet.getRange(rowIndex, 6).setValue(String(params.sabuk));
    sheet.getRange(rowIndex, 7).setValue(String(params.tempatTanggalLahir));
    sheet.getRange(rowIndex, 8).setValue(String(params.dojang));
    sheet.getRange(rowIndex, 9).setValue(String(params.berat));
    sheet.getRange(rowIndex, 10).setValue(String(params.tinggi));
    sheet.getRange(rowIndex, 11).setValue(String(params.kategori)); // Multiple categories
    sheet.getRange(rowIndex, 12).setValue(String(params.kelas));
    sheet.getRange(rowIndex, 13).setValue(String(params.orderJersey || "Tidak"));
    sheet.getRange(rowIndex, 14).setValue(String(params.jerseySize || "-"));
    
    SpreadsheetApp.flush();
    
    console.log("Athlete updated successfully");
    console.log("=== updateAthlete END ===");
    
    return ContentService
      .createTextOutput(JSON.stringify({
        success: true,
        message: "Data atlet berhasil diupdate",
        registrationId: params.registrationId
      }))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (e) {
    console.error("Error in updateAthlete:", e.toString());
    return ContentService
      .createTextOutput(JSON.stringify({ error: e.toString() }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * Fungsi deleteAthlete untuk menghapus data atlet
 */
function deleteAthlete(params) {
  try {
    console.log("=== deleteAthlete START ===");
    console.log("Params:", params);
    
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Daftar');
    if (!sheet) {
      throw new Error("Sheet 'Daftar' tidak ditemukan");
    }
    
    if (!params.rowIndex) {
      throw new Error("Row index tidak valid");
    }
    
    var rowIndex = parseInt(params.rowIndex);
    console.log("Deleting row:", rowIndex);
    
    // Delete the row
    sheet.deleteRow(rowIndex);
    SpreadsheetApp.flush();
    
    console.log("Athlete deleted successfully");
    console.log("=== deleteAthlete END ===");
    
    return ContentService
      .createTextOutput(JSON.stringify({
        success: true,
        message: "Data atlet berhasil dihapus"
      }))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (e) {
    console.error("Error in deleteAthlete:", e.toString());
    return ContentService
      .createTextOutput(JSON.stringify({ error: e.toString() }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}
