// Google Apps Script yang sudah diperbaiki FINAL untuk Spreadsheet Manajemen Tournament
// Copy kode ini ke Google Apps Script dan deploy sebagai Web App
// FIX: ID sinkronisasi yang konsisten antara aplikasi dan Google Sheets

function doPost(e) {
  try {
    const params = e.parameter;
    console.log('Received POST params:', JSON.stringify(params));
    
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    
    // Handle Main Category actions
    if (params.action === 'createMainCategory') {
      let sheet = spreadsheet.getSheetByName('Kategori_Utama');
      if (!sheet) {
        sheet = spreadsheet.insertSheet('Kategori_Utama');
        sheet.getRange(1, 1, 1, 2).setValues([['id_kategori', 'nama_kategori']]);
      }
      
      // Use the ID provided by the application
      const categoryId = parseInt(params.id);
      const rowData = [categoryId, params.name];
      sheet.appendRow(rowData);
      
      console.log('Main category created:', params.name, 'with ID:', categoryId);
      return ContentService
        .createTextOutput(JSON.stringify({
          success: true, 
          message: 'Main category created successfully',
          id: categoryId,
          name: params.name
        }))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    // Handle Update Main Category
    if (params.action === 'updateMainCategory') {
      const sheet = spreadsheet.getSheetByName('Kategori_Utama');
      if (!sheet) {
        return ContentService
          .createTextOutput(JSON.stringify({success: false, message: 'Sheet not found'}))
          .setMimeType(ContentService.MimeType.JSON);
      }
      
      const categoryId = parseInt(params.id);
      const data = sheet.getDataRange().getValues();
      
      for (let i = 1; i < data.length; i++) {
        if (data[i][0] == categoryId) {
          sheet.getRange(i + 1, 2).setValue(params.name);
          console.log('Main category updated:', categoryId, params.name);
          return ContentService
            .createTextOutput(JSON.stringify({
              success: true, 
              message: 'Main category updated successfully',
              id: categoryId,
              name: params.name
            }))
            .setMimeType(ContentService.MimeType.JSON);
        }
      }
      
      return ContentService
        .createTextOutput(JSON.stringify({success: false, message: 'Category not found'}))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    // Handle Delete Main Category
    if (params.action === 'deleteMainCategory') {
      const sheet = spreadsheet.getSheetByName('Kategori_Utama');
      if (!sheet) {
        return ContentService
          .createTextOutput(JSON.stringify({success: false, message: 'Sheet not found'}))
          .setMimeType(ContentService.MimeType.JSON);
      }
      
      const categoryId = parseInt(params.id);
      const data = sheet.getDataRange().getValues();
      
      for (let i = 1; i < data.length; i++) {
        if (data[i][0] == categoryId) {
          sheet.deleteRow(i + 1);
          console.log('Main category deleted:', categoryId);
          return ContentService
            .createTextOutput(JSON.stringify({
              success: true, 
              message: 'Main category deleted successfully'
            }))
            .setMimeType(ContentService.MimeType.JSON);
        }
      }
      
      return ContentService
        .createTextOutput(JSON.stringify({success: false, message: 'Category not found'}))
        .setMimeType(ContentService.MimeType.JSON);
    }

    // Handle Sub Category actions
    if (params.action === 'createSubCategory') {
      let sheet = spreadsheet.getSheetByName('SubKategori');
      if (!sheet) {
        sheet = spreadsheet.insertSheet('SubKategori');
        sheet.getRange(1, 1, 1, 4).setValues([['id_subkategori', 'id_kategori_utama', 'Nomor', 'judul_subkategori']]);
      }
      
      // Use the ID provided by the application
      const subCategoryId = parseInt(params.id);
      const rowData = [subCategoryId, parseInt(params.mainCategoryId), parseInt(params.order), params.name];
      sheet.appendRow(rowData);
      
      console.log('Sub category created:', params.name, 'with ID:', subCategoryId);
      return ContentService
        .createTextOutput(JSON.stringify({
          success: true, 
          message: 'Sub category created successfully',
          id: subCategoryId,
          mainCategoryId: parseInt(params.mainCategoryId),
          order: parseInt(params.order),
          name: params.name
        }))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    // Handle Athlete Group actions
    if (params.action === 'createAthleteGroup') {
      let sheet = spreadsheet.getSheetByName('Kelompok_Atlet');
      if (!sheet) {
        sheet = spreadsheet.insertSheet('Kelompok_Atlet');
        sheet.getRange(1, 1, 1, 5).setValues([['id_kel', 'id_SubKelompok', 'Judul', 'Nomor', 'Keterangan']]);
      }
      
      // Use the ID provided by the application
      const groupId = parseInt(params.id);
      const rowData = [groupId, parseInt(params.subCategoryId), params.name, 1, params.description || ''];
      sheet.appendRow(rowData);
      
      console.log('Athlete group created:', params.name);
      return ContentService
        .createTextOutput(JSON.stringify({
          success: true, 
          message: 'Athlete group created successfully',
          id: groupId,
          subCategoryId: parseInt(params.subCategoryId),
          name: params.name,
          description: params.description || ''
        }))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    // Handle Group Athletes actions
    if (params.action === 'addAthleteToGroup') {
      let sheet = spreadsheet.getSheetByName('daftar_kelompok');
      if (!sheet) {
        sheet = spreadsheet.insertSheet('daftar_kelompok');
        sheet.getRange(1, 1, 1, 10).setValues([['id_daftarKelompok', 'id_kelompokAtlet', 'nama_atlet', 'jenis_kelamin', 'tanggal_lahir', 'dojang', 'sabuk', 'berat_badan', 'tinggi_badan', 'posisi']]);
      }
      
      const data = sheet.getDataRange().getValues();
      const nextId = data.length; // Header row is 1, so next ID starts from data.length
      
      const rowData = [
        nextId,
        parseInt(params.groupId),
        params.athleteName,
        params.gender || '',
        params.birthDate || '',
        params.dojang || '',
        params.belt || '',
        parseFloat(params.weight) || 0,
        parseFloat(params.height) || 0,
        params.position || 'queue'
      ];
      sheet.appendRow(rowData);
      
      console.log('Athlete added to group:', params.athleteName);
      return ContentService
        .createTextOutput(JSON.stringify({
          success: true, 
          message: 'Athlete added to group successfully'
        }))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    // Handle other existing actions from the management script
    if (params.action === 'updateAttendance') {
      const sheet = spreadsheet.getSheetByName('atlets');
      if (!sheet) {
        return ContentService
          .createTextOutput(JSON.stringify({success: false, message: 'Sheet not found'}))
          .setMimeType(ContentService.MimeType.JSON);
      }
      
      const athleteId = parseInt(params.athleteId);
      const isPresent = params.isPresent === 'true';
      const data = sheet.getDataRange().getValues();
      
      for (let i = 1; i < data.length; i++) {
        if (data[i][0] == athleteId) {
          sheet.getRange(i + 1, 11).setValue(isPresent ? 'TRUE' : 'FALSE');
          console.log('Attendance updated:', athleteId, isPresent);
          return ContentService
            .createTextOutput(JSON.stringify({success: true, message: 'Attendance updated'}))
            .setMimeType(ContentService.MimeType.JSON);
        }
      }
      
      return ContentService
        .createTextOutput(JSON.stringify({success: false, message: 'Athlete not found'}))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    if (params.action === 'updateAthlete') {
      const sheet = spreadsheet.getSheetByName('atlets');
      if (!sheet) {
        return ContentService
          .createTextOutput(JSON.stringify({success: false, message: 'Sheet not found'}))
          .setMimeType(ContentService.MimeType.JSON);
      }
      
      const athleteId = parseInt(params.athleteId);
      const data = sheet.getDataRange().getValues();
      
      for (let i = 1; i < data.length; i++) {
        if (data[i][0] == athleteId) {
          sheet.getRange(i + 1, 2).setValue(params.name || data[i][1]);
          sheet.getRange(i + 1, 3).setValue(params.gender || data[i][2]);
          sheet.getRange(i + 1, 4).setValue(params.birthDate || data[i][3]);
          sheet.getRange(i + 1, 5).setValue(params.dojang || data[i][4]);
          sheet.getRange(i + 1, 6).setValue(params.belt || data[i][5]);
          sheet.getRange(i + 1, 7).setValue(parseFloat(params.weight) || data[i][6]);
          sheet.getRange(i + 1, 8).setValue(parseFloat(params.height) || data[i][7]);
          sheet.getRange(i + 1, 9).setValue(params.category || data[i][8]);
          sheet.getRange(i + 1, 10).setValue(params.class || data[i][9]);
          sheet.getRange(i + 1, 12).setValue(params.status || data[i][11]);
          
          console.log('Athlete updated:', athleteId);
          return ContentService
            .createTextOutput(JSON.stringify({success: true, message: 'Athlete updated'}))
            .setMimeType(ContentService.MimeType.JSON);
        }
      }
      
      return ContentService
        .createTextOutput(JSON.stringify({success: false, message: 'Athlete not found'}))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    if (params.action === 'batchTransfer') {
      const sheet = spreadsheet.getSheetByName('atlets');
      if (!sheet) {
        return ContentService
          .createTextOutput(JSON.stringify({success: false, message: 'Sheet atlets tidak ditemukan'}))
          .setMimeType(ContentService.MimeType.JSON);
      }
      
      const batchData = JSON.parse(params.athletes);
      let successCount = 0;
      
      for (const item of batchData) {
        try {
          const rowData = [
            '', // ID akan di-generate otomatis
            item.nama_lengkap,
            item.jenis_kelamin,
            item.tanggal_lahir,
            item.dojang,
            item.sabuk,
            item.berat_badan,
            item.tinggi_badan,
            item.kategori,
            item.kelas,
            item.isPresent,
            item.status,
            new Date().toLocaleString('id-ID')
          ];
          
          sheet.appendRow(rowData);
          successCount++;
        } catch (error) {
          console.error('Error adding athlete:', item.nama_lengkap, error);
        }
      }
      
      return ContentService
        .createTextOutput(JSON.stringify({
          success: true, 
          message: `Batch transfer berhasil: ${successCount}/${batchData.length} atlet`,
          count: successCount
        }))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    return ContentService
      .createTextOutput(JSON.stringify({success: false, message: 'Action tidak dikenal atau parameter tidak lengkap'}))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (error) {
    console.error('Error in doPost:', error);
    return ContentService
      .createTextOutput(JSON.stringify({success: false, error: error.toString()}))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

function doGet(e) {
  try {
    const params = e.parameter;
    console.log('Received GET params:', JSON.stringify(params));
    
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    
    if (params.action === 'test') {
      return ContentService
        .createTextOutput(JSON.stringify({success: true, message: 'Google Apps Script bekerja dengan baik'}))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    // Get main categories
    if (params.action === 'getMainCategories') {
      const sheet = spreadsheet.getSheetByName('Kategori_Utama');
      if (!sheet) {
        return ContentService
          .createTextOutput(JSON.stringify({success: true, data: []}))
          .setMimeType(ContentService.MimeType.JSON);
      }
      
      const data = sheet.getDataRange().getValues();
      const categories = data.slice(1).map(row => ({
        id: row[0],
        name: row[1]
      }));
      
      return ContentService
        .createTextOutput(JSON.stringify({success: true, data: categories}))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    if (params.action === 'getAllData') {
      const sheet = spreadsheet.getSheetByName('atlets');
      if (!sheet) {
        return ContentService
          .createTextOutput(JSON.stringify({success: false, message: 'Sheet atlets tidak ditemukan'}))
          .setMimeType(ContentService.MimeType.JSON);
      }
      
      const data = sheet.getDataRange().getValues();
      return ContentService
        .createTextOutput(JSON.stringify({success: true, data: data}))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    if (params.action === 'getCompetitions') {
      const sheet = spreadsheet.getSheetByName('Kejuaraan');
      if (!sheet) {
        return ContentService
          .createTextOutput(JSON.stringify({success: true, data: []}))
          .setMimeType(ContentService.MimeType.JSON);
      }
      
      const data = sheet.getDataRange().getValues();
      const competitions = data.slice(1).map(row => ({
        id: row[0],
        name: row[1],
        date: row[2],
        location: row[3],
        description: row[4]
      }));
      
      return ContentService
        .createTextOutput(JSON.stringify({success: true, data: competitions}))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    if (params.action === 'getAthletesByCompetition') {
      const sheet = spreadsheet.getSheetByName(params.competitionId);
      if (!sheet) {
        return ContentService
          .createTextOutput(JSON.stringify({success: true, data: []}))
          .setMimeType(ContentService.MimeType.JSON);
      }
      
      const data = sheet.getDataRange().getValues();
      const athletes = data.slice(1).map(row => ({
        id: row[0],
        nama_lengkap: row[1],
        jenis_kelamin: row[2],
        tanggal_lahir: row[3],
        dojang: row[4],
        sabuk: row[5],
        berat_badan: parseFloat(row[6]) || 0,
        tinggi_badan: parseFloat(row[7]) || 0,
        kategori: row[8],
        kelas: row[9]
      }));
      
      return ContentService
        .createTextOutput(JSON.stringify({success: true, data: athletes}))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    return ContentService
      .createTextOutput(JSON.stringify({success: false, message: 'Action tidak dikenal'}))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (error) {
    console.error('Error in doGet:', error);
    return ContentService
      .createTextOutput(JSON.stringify({success: false, error: error.toString()}))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

function initializeSheets() {
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  
  // Create atlets sheet if not exists
  let atletsSheet = spreadsheet.getSheetByName('atlets');
  if (!atletsSheet) {
    atletsSheet = spreadsheet.insertSheet('atlets');
    atletsSheet.getRange(1, 1, 1, 13).setValues([
      ['ID', 'Nama Lengkap', 'Jenis Kelamin', 'Tanggal Lahir', 'Dojang', 'Sabuk', 'Berat Badan', 'Tinggi Badan', 'Kategori', 'Kelas', 'Kehadiran', 'Status', 'Tanggal Update']
    ]);
  }
  
  // Create Kejuaraan sheet if not exists
  let kejuaraanSheet = spreadsheet.getSheetByName('Kejuaraan');
  if (!kejuaraanSheet) {
    kejuaraanSheet = spreadsheet.insertSheet('Kejuaraan');
    kejuaraanSheet.getRange(1, 1, 1, 5).setValues([
      ['ID', 'Nama Kejuaraan', 'Tanggal', 'Lokasi', 'Deskripsi']
    ]);
  }
  
  // Create tournament structure sheets
  let kategoriUtamaSheet = spreadsheet.getSheetByName('Kategori_Utama');
  if (!kategoriUtamaSheet) {
    kategoriUtamaSheet = spreadsheet.insertSheet('Kategori_Utama');
    kategoriUtamaSheet.getRange(1, 1, 1, 2).setValues([
      ['id_kategori', 'nama_kategori']
    ]);
  }
  
  let subKategoriSheet = spreadsheet.getSheetByName('SubKategori');
  if (!subKategoriSheet) {
    subKategoriSheet = spreadsheet.insertSheet('SubKategori');
    subKategoriSheet.getRange(1, 1, 1, 4).setValues([
      ['id_subkategori', 'id_kategori_utama', 'Nomor', 'judul_subkategori']
    ]);
  }
  
  let kelompokAtletSheet = spreadsheet.getSheetByName('Kelompok_Atlet');
  if (!kelompokAtletSheet) {
    kelompokAtletSheet = spreadsheet.insertSheet('Kelompok_Atlet');
    kelompokAtletSheet.getRange(1, 1, 1, 5).setValues([
      ['id_kel', 'id_SubKelompok', 'Judul', 'Nomor', 'Keterangan']
    ]);
  }
  
  let daftarKelompokSheet = spreadsheet.getSheetByName('daftar_kelompok');
  if (!daftarKelompokSheet) {
    daftarKelompokSheet = spreadsheet.insertSheet('daftar_kelompok');
    daftarKelompokSheet.getRange(1, 1, 1, 10).setValues([
      ['id_daftarKelompok', 'id_kelompokAtlet', 'nama_atlet', 'jenis_kelamin', 'tanggal_lahir', 'dojang', 'sabuk', 'berat_badan', 'tinggi_badan', 'posisi']
    ]);
  }
  
  console.log('All sheets initialized successfully');
}